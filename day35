체육복 - 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다.
        학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 
        예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 
        체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.

        전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost,
        여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 
        체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.
        
        제한사항
        - 전체 학생의 수는 2명 이상 30명 이하입니다.
        - 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
        - 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
        - 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
        - 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 
          남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.
          
class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        int answer = 0;
        // lost 인원 수를 다 빼고, 밑에서 체육복을 빌린 사람을 더할 것.
        answer = n - lost.length;
        
        // 제한사항을 고려 안해서 한참 걸림. 
        // 가져온 여분의 체육복을 도난당해서 빌려주지 못하고 본인만 체육복을 입을 수 있다. 
        for (int i = 0; i < reserve.length; i++) {
            for (int j = 0; j < lost.length; j++) {
                if (reserve[i] == lost[j]) {
                
                    // 확인이 끝난 사람을 확인하기 위해 문제와 상관없는 숫자로 바꿔준다. 
                    reserve[i] = 400;
                    lost[j] = 400;
                    answer++;
                    break;
                }
            }
        }
        
         
        for (int i = 0; i < reserve.length; i++) {
            for (int j = 0; j < lost.length; j++) {
                if (reserve[i] - 1 == lost[j] || reserve[i] + 1 == lost[j]) {
                
                    // 확인이 끝난 사람을 확인하기 위해 문제와 상관없는 숫자로 바꿔준다.
                    reserve[i] = 400;
                    lost[j] = 400;
                    answer++;
                    break;
                }    
            }           
        }

        return answer;
    }
}          
