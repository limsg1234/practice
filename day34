크레인 인형뽑기 게임 - 게임 화면은 1 x 1 크기의 칸들로 이루어진 N x N 크기의 정사각 격자이며 위쪽에는 크레인이 있고 오른쪽에는 바구니가 있습니다.
                     각 격자 칸에는 다양한 인형이 들어 있으며 인형이 없는 칸은 빈칸입니다.
                     모든 인형은 1 x 1 크기의 격자 한 칸을 차지하며 격자의 가장 아래 칸부터 차곡차곡 쌓여 있습니다. 
                     게임 사용자는 크레인을 좌우로 움직여서 멈춘 위치에서 가장 위에 있는 인형을 집어 올릴 수 있습니다. 
                     집어 올린 인형은 바구니에 쌓이게 되는 데, 이때 바구니의 가장 아래 칸부터 인형이 순서대로 쌓이게 됩니다.
                     만약 같은 모양의 인형 두 개가 바구니에 연속해서 쌓이게 되면 두 인형은 터뜨려지면서 바구니에서 사라지게 됩니다. 
                     크레인 작동 시 인형이 집어지지 않는 경우는 없으나 만약 인형이 없는 곳에서 크레인을 작동시키는 경우에는 아무런 일도 일어나지 않습니다. 
                     또한 바구니는 모든 인형이 들어갈 수 있을 만큼 충분히 크다고 가정합니다. 
                     게임 화면의 격자의 상태가 담긴 2차원 배열 board와 인형을 집기 위해 크레인을 작동시킨 위치가 담긴 배열 moves가 매개변수로 주어질 때, 
                     크레인을 모두 작동시킨 후 터트려져 사라진 인형의 개수를 return 하도록 solution 함수를 완성해주세요.

* Stack : 한쪽 끝에서만 자료(데이터)를 넣고 뺄 수 있는 형식의 자료구조. (ex. 인터넷의 뒤로가기, 앞으로가기)
          데이터를 쌓는 형식으로 저장하므로 조회, 추가, 삭제가 가장 최근의 데이터에서 이루어진다.
          가장 최근의 데이터를 top 이라고 한다.
          
          데이터 추가 : push(data)
          데이터 삭제 : pop()
          데이터 조회 : peek()
          데이터가 비었는지 확인 : empty()
          데이터 위치 반환 : search(num)
          
import java.util.*;
class Solution {
    public int solution(int[][] board, int[] moves) {
        int answer = 0;
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < moves.length; i++) {
            for (int j = 0; j < board.length; j++) {
            
                if (board[j][moves[i] - 1] != 0) {
                    if (stack.isEmpty()) {
                        stack.push(board[j][moves[i] - 1]);
                    }
                    else {
                        if (stack.peek() == board[j][moves[i] - 1]) {
                            stack.pop();
                            answer += 2;
                        }
                        else {
                            stack.push(board[j][moves[i] - 1]);
                        }
                    }
                    
                    board[j][moves[i] - 1] = 0;
                    break;
                }
            }    
        }
        
        return answer;
    }
}

