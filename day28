비밀지도 - 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 공백(" ) 또는벽(#") 두 종류로 이루어져 있다.
          전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 지도 1과 지도 2라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
          지도 1과 지도 2는 각각 정수 배열로 암호화되어 있다.
          암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.
          
          원래의 비밀지도를 해독하여 '#', 공백으로 구성된 문자열 배열로 출력하라.
          
          예시)
          매개변수	값
          n	        5
          arr1	    [9, 20, 28, 18, 11]
          arr2	    [30, 1, 21, 17, 28]
          출력	    ["#####","# # #", "### #", "# ##", "#####"]
          
          매개변수	값
          n	        6
          arr1	    [46, 33, 33 ,22, 31, 50]
          arr2	    [27 ,56, 19, 14, 14, 10]
          출력	    ["######", "### #", "## ##", " #### ", " #####", "### # "]          
     
     
1. 내가 푼 풀이 : 이진수를 십진수로 바꿀 때 Integer.toBinaryString (return String) 을 사용했다.    

class Solution {
  public String[] solution(int n, int[] arr1, int[] arr2) {
      String[] answer = new String[n];
      
      // 십진수를 하나씩 꺼내면서 이진수로 바꾼다.
      for (int i = 0; i < arr1.length; i++) {
          String[] one = new String[n]; 
          String[] two = new String[n];
          one[i] = Integer.toBinaryString(arr1[i]);
          two[i] = Integer.toBinaryString(arr2[i]);
          
          // 이거를 안해서 계속 에러났었음. 예를 들어, n이 5인데 이진수는 [1001] 이 나올 수 있기 때문에 [ 1001]로 맞춰줘야 함.
          one[i] = String.format("%" + n + "s", one[i]);
          two[i] = String.format("%" + n + "s", two[i]);
          
          String[] sp1;
          String[] sp2;
          
          sp1 = one[i].split("");
          sp2 = two[i].split("");
                  
          String result = "";
          
          for (int j = 0; j < n; j++) {
              if (sp1[j].equals("1") || sp2[j].equals("1")) {
                  result += "#";
              }
              else {
                  result += " ";
              }
          }
          answer[i] = result;
      }
      return answer;
  }
}

2. 비트연산자를 사용한 풀이
* 이진수 1개 단위가 비트이고, 비트가 8개 모인 것이 바이트.
* | 연산자는 두 비트 중 하나라도 1이면 1을 반환한다.

class Solution {
  public String[] solution(int n, int[] arr1, int[] arr2) {
        String[] result = new String[n];
	for (int i = 0; i < n; i++) {	
		result[i] = Integer.toBinaryString( arr1[i] | arr2[i]);
		
	        result[i] = String.format("%" + n + "s", result[i]);
	        result[i] = result[i].replaceAll("1", "#");
	        result[i] = result[i].replaceAll("0", " ");
	    }

	    return result;
	    }

}
          
