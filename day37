가장 큰 수 - 0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.
            예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고, 이중 가장 큰 수는 6210입니다.
            0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때, 순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어
            return 하도록 solution 함수를 작성해주세요.

            제한 사항
            - numbers의 길이는 1 이상 100,000 이하입니다.
            - numbers의 원소는 0 이상 1,000 이하입니다.
            - 정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.
  
< 풀이 순서 > 
* 숫자를 더하는게 아니라 합쳐야 하므로 String 으로 바꿔서 시작.            
* 처음에 모든 원소를 다 합쳐서 새로운 배열을 만들고 그것을 정렬하려고 했으나, 그렇게 되면 요소가 많을 때는 좋지 않은 방법일 것.
* 그래서 합치기 전 정렬을 하고 그 순서대로 합쳐야 함. 
* 그런데 예를 들어, 30 과 3 이 있으면 정렬하면 30 이 크지만 합쳤을 때는 303 보다 330 이 더 크기 때문에 
  3 이 30 보다 앞에 가야한다. 이런 경우가 있어서 특정한 기준을 가진 정렬을 해야 한다.
* 원소를 두개씩 합쳐보고 정렬한다. (14, 8 이면 148 과 814 를 비교)


< Comparator 인터페이스 에 대해 알게 된 내용 정리 >
- 평소 정렬할 때 사용하던 sort()는 Comparable 에 의해 구현된 것이다.
- sort 처럼 배열과 리스트에 다 사용한다. 그냥 정렬에 사용한다고 생각하면 된다.
- Comparable 과 Comparator 이 있는데
  Comparable은 기본적인 정렬을 하는 것이고, Comparator은 특정한 기준을 주고 정렬을 해야 할 때 사용한다.


1.

import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        String[] str_numbers = new String[numbers.length]; 
        
        for (int i = 0 ; i < numbers.length ; i++) {
            str_numbers[i] = String.valueOf(numbers[i]);
        }

        // str_numbers를 Compare()에 정의된 방식으로 정렬
        Arrays.sort(str_numbers, new Compare());

        // 현재 str_numbers는 올림차순으로 정렬되어 있음
        // 따라서 가장 마지막 인덱스의 값이 max값이고, 이것이 반환값의 가장 앞에 올 숫자임
        // 반환값의 맨 앞 숫자가 0이면 answer=0 
        // 반환값의 맨 앞 숫자가 0이 아니면 내림차순으로(가장 큰 수부터) answer에 담음
        if (str_numbers[str_numbers.length - 1].equals("0")) {
            answer += "0";
        } else {
            for (int i = str_numbers.length - 1; i >= 0; i--) {
                // Compare 클래스에서 올림차순 정렬을 했다면 아래 코드 사용
                // for(int i = 0 ; i < str_numbers.length ; i++)
                answer += str_numbers[i];
            }
        }
        return answer;
    }

}

// Comparator 인터페이스를 오버라이딩하여 정렬 방식을 재정의하기
class Compare implements Comparator<String> {
    @Override
    public int compare(String o1, String o2) {
        return (o1 + o2).compareTo(o2 + o1); // 올림차순 정렬
        
        // 아직 어떤 원리인지는 확실히 모르겠으나, 알아서 배열에서 두개씩 가져와서 합친 후 비교하고 
        // 결과에 따라 양수, 음수, 0 을 리턴한다. o1 + o2가 더 크면 양수, o2 + o1이 더 크면 음수이고 같다면 0이다. 
        // 이 리턴값을 가져가서 무슨 원리인지는 모르겠지만 정렬을 해준다.
        
        
        // 내림차순 정렬은 아래와 같이 순서를 바꾸어주면 된다
        // return (o2 + o1).compareTo(o1 + o2);
    }

}


2. ArrayList

import java.util.*;
class Solution {
    public String solution(int[] numbers) {
        String answer = "";
        ArrayList<String> arr = new ArrayList<String>();
        
        for(int i=0; i<numbers.length; i++) {
            arr.add(String.valueOf(numbers[i]));
        }
        
        // [0, 0, 0] 이면 값이 000 나올 수 있으니 0으로 리턴해줌
        for(int i = 0; i < arr.size(); i++) {
            if( !arr.get(i).equals("0") ) {
                break;
            }
            
            if(i == arr.size() - 1) {
                return "0";
            }
        }
        
        Collections.sort(arr, new Comparator<String>() {
 
            @Override
            public int compare(String arg0, String arg1) {
                
                return (arg1+arg0).compareTo(arg0+arg1);
            }
        });
                
        for(int i = 0; i < arr.size(); i++) {
            answer += arr.get(i);
        }
        return answer;
    }

}



